
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
000001c3 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
0000030c g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000304 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
0000034c g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000330 g     F .text	0000001c memset
00000054 g     F .text	000002b0 main
00000040 g       *ABS*	00000000 __ram_size
000001c3  w      .debug_info	00000000 .hidden path_planner.c.d0a2e670
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000350 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    35000593          	addi	x11,x0,848
  1c:	    00000613          	addi	x12,x0,0
  20:	    2ec000ef          	jal	x1,30c <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    2fc000ef          	jal	x1,330 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    2c4000ef          	jal	x1,304 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                   fb010113          	addi	x2,x2,-80
  58:	                   04112623          	sw	x1,76(x2)
  5c:	                   04812423          	sw	x8,72(x2)
     ### 
     ###     // Define adjacency list using bit representation
     ###     // Each uint32_t represents connections for a node
     ###     
     ###     graph[ 0]  =  (1 << 1) | (1 << 10) | (1 << 6);                                    // 0 : connects to  1, 10, 6
     ###     graph[ 1]  =  (1 << 0) | (1 << 11) | (1 << 2);                                    // 1 : connects to  0, 11, 2
  60:	                   00001737          	lui	x14,0x1
     ###     graph[ 0]  =  (1 << 1) | (1 << 10) | (1 << 6);                                    // 0 : connects to  1, 10, 6
  64:	                   02000437          	lui	x8,0x2000
  68:	                   44200793          	addi	x15,x0,1090
  6c:	                   00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ###     graph[ 1]  =  (1 << 0) | (1 << 11) | (1 << 2);                                    // 1 : connects to  0, 11, 2
  70:	                   80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  74:	                   00f42a23          	sw	x15,20(x8)
     ###     graph[ 2]  =  (1 << 3) | (1 << 5)  | (1 << 4) | (1 << 1);                         // 2 : connects to  3,  5, 4, 1
  78:	                   03a00793          	addi	x15,x0,58
  7c:	                   00f42c23          	sw	x15,24(x8)
     ###     graph[ 3]  =  (1 << 2);                                                           // 3 : connects to  2
  80:	                   00400793          	addi	x15,x0,4
  84:	                   00f42e23          	sw	x15,28(x8)
     ###     graph[ 4]  =  (1 << 2);                                                           // 4 : connects to  2
  88:	                   02f42023          	sw	x15,32(x8)
     ###     graph[ 5]  =  (1 << 2);                                                           // 5 : connects to  2
  8c:	                   02f42223          	sw	x15,36(x8)
     ###     graph[ 6]  =  (1 << 7) | (1 << 8) | (1 << 9) | (1 << 0);                          // 6 : connects to  7,  8, 9, 0
  90:	                   38100793          	addi	x15,x0,897
  94:	                   02f42423          	sw	x15,40(x8)
     ###     graph[ 7]  =  (1 << 6);                                                           // 7 : connects to  6
  98:	                   04000793          	addi	x15,x0,64
  9c:	                   02f42623          	sw	x15,44(x8)
     ###     graph[ 8]  =  (1 << 6);                                                           // 8 : connects to  6
  a0:	                   02f42823          	sw	x15,48(x8)
     ###     graph[ 9]  =  (1 << 6);                                                           // 9 : connects to  6
  a4:	                   02f42a23          	sw	x15,52(x8)
     ###     graph[10]  =  (1 << 0)  | (1 << 11) | (1 << 24) | (1 << 26);                      // 10: connects to  1, 11, 24, 26
  a8:	                   050017b7          	lui	x15,0x5001
  ac:	                   80178793          	addi	x15,x15,-2047 # 5000801 <__global_pointer$+0x3000001>
  b0:	                   02f42c23          	sw	x15,56(x8)
     ###     graph[11]  =  (1 << 10) | (1 << 12) | (1 << 1) | (1 << 19);                       // 11: connects to 10, 12,  1, 19
  b4:	                   000817b7          	lui	x15,0x81
  b8:	                   40278793          	addi	x15,x15,1026 # 81402 <__flash_size+0x81002>
  bc:	                   02f42e23          	sw	x15,60(x8)
     ###     graph[12]  =  (1 << 11) | (1 << 13) | (1 << 14);                                  // 12: connects to 11, 13, 14
  c0:	                   000077b7          	lui	x15,0x7
  c4:	                   80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  c8:	                   04f42023          	sw	x15,64(x8)
     ###     graph[13]  =  (1 << 12);                                                          // 13: connects to 12
     ###     graph[14]  =  (1 << 12) | (1 << 15) | (1 << 16);                                  // 14: connects to 12, 15, 16
  cc:	                   000197b7          	lui	x15,0x19
  d0:	                   04f42423          	sw	x15,72(x8)
     ###     graph[15]  =  (1 << 14);                                                          // 15: connects to 14
  d4:	                   000047b7          	lui	x15,0x4
  d8:	                   04f42623          	sw	x15,76(x8)
     ###     graph[16]  =  (1 << 14) | (1 << 17) | (1 << 18);                                  // 16: connects to 14, 17, 18
  dc:	                   000647b7          	lui	x15,0x64
  e0:	                   04f42823          	sw	x15,80(x8)
     ###     graph[17]  =  (1 << 16);                                                          // 17: connects to 16
  e4:	                   000107b7          	lui	x15,0x10
  e8:	                   04f42a23          	sw	x15,84(x8)
     ###     graph[18]  =  (1 << 16) | (1 << 19) | (1 << 21);                                  // 18: connects to 16, 19, 21
  ec:	                   002907b7          	lui	x15,0x290
  f0:	                   04f42c23          	sw	x15,88(x8)
     ###     graph[19]  =  (1 << 18) | (1 << 20) | (1 << 11);                                  // 19: connects to 18, 20, 11
  f4:	                   001417b7          	lui	x15,0x141
  f8:	                   80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
  fc:	                   04f42e23          	sw	x15,92(x8)
     ###     graph[20]  =  (1 << 19);                                                          // 20: connects to 19
 100:	                   000807b7          	lui	x15,0x80
 104:	                   06f42023          	sw	x15,96(x8)
     ###     graph[21]  =  (1 << 18) | (1 << 22) | (1 << 23);                                  // 21: connects to 18, 22, 23
 108:	                   00c407b7          	lui	x15,0xc40
 10c:	                   06f42223          	sw	x15,100(x8)
     ###     graph[22]  =  (1 << 21);                                                          // 22: connects to 21
 110:	                   002007b7          	lui	x15,0x200
 114:	                   06f42423          	sw	x15,104(x8)
     ###     graph[23]  =  (1 << 21) | (1 << 24) | (1 << 30);                                  // 23: connects to 21, 24, 30
 118:	                   412007b7          	lui	x15,0x41200
 11c:	                   06f42623          	sw	x15,108(x8)
     ###     graph[24]  =  (1 << 23) | (1 << 25) | (1 << 10);                                  // 24: connects to 23, 25, 10
 120:	                   028007b7          	lui	x15,0x2800
 124:	                   40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 128:	                   06f42823          	sw	x15,112(x8)
     ###     graph[25]  =  (1 << 24);                                                          // 25: connects to 24
 12c:	                   010007b7          	lui	x15,0x1000
 130:	                   06f42a23          	sw	x15,116(x8)
     ###     graph[26]  =  (1 << 10) | (1 << 27) | (1 << 28);                                  // 26: connects to 10, 27, 28
 134:	                   180007b7          	lui	x15,0x18000
 138:	                   40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 13c:	                   06f42c23          	sw	x15,120(x8)
     ###     graph[27]  =  (1 << 26);                                                          // 27: connects to 26
 140:	                   040007b7          	lui	x15,0x4000
 144:	                   06f42e23          	sw	x15,124(x8)
     ###     graph[28]  =  (1 << 26) | (1 << 29) | (1 << 30);                                  // 28: connects to 26, 29, 30
 148:	                   640007b7          	lui	x15,0x64000
 14c:	                   08f42023          	sw	x15,128(x8)
     ###     graph[29]  =  (1 << 28);                                                          // 29: connects to 28
 150:	                   100007b7          	lui	x15,0x10000
     ###     graph[13]  =  (1 << 12);                                                          // 13: connects to 12
 154:	                   04e42223          	sw	x14,68(x8)
     ###     graph[29]  =  (1 << 28);                                                          // 29: connects to 28
 158:	                   08f42223          	sw	x15,132(x8)
     ###     graph[30]  =  (1 << 28) | (1 << 31) | (1 << 23);                                  // 30: connects to 28, 31, 23
 15c:	                   908007b7          	lui	x15,0x90800
 160:	                   08f42423          	sw	x15,136(x8)
     ###     graph[31]  =  (1 << 30);                                                          // 31: connects to 30
 164:	                   400007b7          	lui	x15,0x40000
 168:	                   08f42623          	sw	x15,140(x8)
     ### 
     ### 
     ### 
     ###     // Initialize arrays
     ###     for (uint8_t i = 0; i < 32; i++) {
     ###         dist[i] = UINT8_MAX;
 16c:	                   04000613          	addi	x12,x0,64
 170:	                   0ff00593          	addi	x11,x0,255
 174:	                   09040513          	addi	x10,x8,144
 178:	                   1b8000ef          	jal	x1,330 <memset>
     ###         prev[i] = UINT8_MAX;
     ###         visited[i] = 0;
 17c:	                   0d040513          	addi	x10,x8,208
 180:	                   02000613          	addi	x12,x0,32
 184:	                   00000593          	addi	x11,x0,0
 188:	                   1a8000ef          	jal	x1,330 <memset>
     ###     }
     ### 
     ###     // Set start point distance to 0
     ###     dist[START_POINT] = 0;
 18c:	                   00044783          	lbu	x15,0(x8)
     ###         // Find minimum distance vertex
     ###         uint8_t min_dist = UINT8_MAX;
     ###         uint8_t u = 0;
     ###         
     ###         for (uint8_t v = 0; v < 32; v++) {
     ###             if (!visited[v] && dist[v] < min_dist) {
 190:	                   02000337          	lui	x6,0x2000
     ###     dist[START_POINT] = 0;
 194:	                   02000693          	addi	x13,x0,32
 198:	                   0ff7f793          	andi	x15,x15,255
 19c:	                   00f40433          	add	x8,x8,x15
 1a0:	                   08040823          	sb	x0,144(x8)
     ###         uint8_t min_dist = UINT8_MAX;
 1a4:	                   0ff00f13          	addi	x30,x0,255
     ###         for (uint8_t v = 0; v < 32; v++) {
 1a8:	                   02000e13          	addi	x28,x0,32
     ###         // If we can't reach any more nodes, break
     ###         if (min_dist == UINT8_MAX) {
     ###             break;
     ###         }
     ###         
     ###         visited[u] = 1;
 1ac:	                   00100e93          	addi	x29,x0,1
     ###         
     ###         // Check all possible connections
     ###         for (uint8_t v = 0; v < 32; v++) {
     ###             if ((graph[u] & (1U << v)) && !visited[v]) {
 1b0:	                   01030f93          	addi	x31,x6,16 # 2000010 <__bss_end+0x10>
 1b4:	                   09030293          	addi	x5,x6,144
     ### int main(int argc, char const *argv[]) {
 1b8:	      /----------> 00000793          	addi	x15,x0,0
     ###         uint8_t u = 0;
 1bc:	      |            00000613          	addi	x12,x0,0
     ###         uint8_t min_dist = UINT8_MAX;
 1c0:	      |            0ff00713          	addi	x14,x0,255
     ###             if (!visited[v] && dist[v] < min_dist) {
 1c4:	      |     /----> 00f305b3          	add	x11,x6,x15
 1c8:	      |     |      0d05c803          	lbu	x16,208(x11)
 1cc:	      |     |      0ff7f513          	andi	x10,x15,255
 1d0:	      |     |  /-- 00081a63          	bne	x16,x0,1e4 <path_planner.c.d0a2e670+0x21>
 1d4:	      |     |  |   0905c583          	lbu	x11,144(x11)
 1d8:	      |     |  +-- 00e5f663          	bgeu	x11,x14,1e4 <path_planner.c.d0a2e670+0x21>
 1dc:	      |     |  |   00050613          	addi	x12,x10,0
 1e0:	      |     |  |   00058713          	addi	x14,x11,0
     ###         for (uint8_t v = 0; v < 32; v++) {
 1e4:	      |     |  \-> 00178793          	addi	x15,x15,1 # 40000001 <__global_pointer$+0x3dfff801>
 1e8:	      |     \----- fdc79ee3          	bne	x15,x28,1c4 <path_planner.c.d0a2e670+0x1>
     ###         if (min_dist == UINT8_MAX) {
 1ec:	      |  /-------- 07e70463          	beq	x14,x30,254 <path_planner.c.d0a2e670+0x91>
     ###         visited[u] = 1;
 1f0:	      |  |         00c30533          	add	x10,x6,x12
     ###             if ((graph[u] & (1U << v)) && !visited[v]) {
 1f4:	      |  |         00261593          	slli	x11,x12,0x2
     ###         visited[u] = 1;
 1f8:	      |  |         0dd50823          	sb	x29,208(x10)
     ###             if ((graph[u] & (1U << v)) && !visited[v]) {
 1fc:	      |  |         01f585b3          	add	x11,x11,x31
 200:	      |  |         00000793          	addi	x15,x0,0
 204:	      |  |  /----> 0005a803          	lw	x16,0(x11)
 208:	      |  |  |      00fe9733          	sll	x14,x29,x15
 20c:	      |  |  |      01077733          	and	x14,x14,x16
 210:	      |  |  |  /-- 02070863          	beq	x14,x0,240 <path_planner.c.d0a2e670+0x7d>
 214:	      |  |  |  |   00f30833          	add	x16,x6,x15
 218:	      |  |  |  |   0d084703          	lbu	x14,208(x16)
 21c:	      |  |  |  +-- 02071263          	bne	x14,x0,240 <path_planner.c.d0a2e670+0x7d>
     ###                 uint8_t alt = dist[u] + 1; // Using weight 1 for all edges
 220:	      |  |  |  |   09054703          	lbu	x14,144(x10)
 224:	      |  |  |  |   005788b3          	add	x17,x15,x5
     ###                 if (alt < dist[v]) {
 228:	      |  |  |  |   0008c383          	lbu	x7,0(x17)
     ###                 uint8_t alt = dist[u] + 1; // Using weight 1 for all edges
 22c:	      |  |  |  |   00170713          	addi	x14,x14,1
 230:	      |  |  |  |   0ff77713          	andi	x14,x14,255
     ###                 if (alt < dist[v]) {
 234:	      |  |  |  +-- 00777663          	bgeu	x14,x7,240 <path_planner.c.d0a2e670+0x7d>
     ###                     dist[v] = alt;
 238:	      |  |  |  |   00e88023          	sb	x14,0(x17)
     ###                     prev[v] = u;
 23c:	      |  |  |  |   0ac80823          	sb	x12,176(x16)
     ###         for (uint8_t v = 0; v < 32; v++) {
 240:	      |  |  |  \-> 00178793          	addi	x15,x15,1
 244:	      |  |  \----- fdc790e3          	bne	x15,x28,204 <path_planner.c.d0a2e670+0x41>
     ###     for (uint8_t count = 0; count < 32; count++) {
 248:	      |  |         fff68693          	addi	x13,x13,-1
 24c:	      |  |         0ff6f693          	andi	x13,x13,255
 250:	      \--|-------- f60694e3          	bne	x13,x0,1b8 <main+0x164>
     ###             }
     ###         }
     ###     }
     ### 
     ###     // Reconstruct path
     ###     uint8_t current = END_POINT;
 254:	         \-------> 020006b7          	lui	x13,0x2000
 258:	                   0046c783          	lbu	x15,4(x13) # 2000004 <__bss_end+0x4>
 25c:	                   00000713          	addi	x14,x0,0
     ###     uint8_t temp_path[32];
     ###     uint8_t temp_idx = 0;
     ### 
     ###     // Build path from end to start
     ###     while (current != UINT8_MAX && temp_idx < 32) {
 260:	                   0ff00513          	addi	x10,x0,255
     ###     uint8_t current = END_POINT;
 264:	                   0ff7f793          	andi	x15,x15,255
     ###     while (current != UINT8_MAX && temp_idx < 32) {
 268:	                   02000593          	addi	x11,x0,32
     ###         temp_path[temp_idx++] = current;
     ###         current = prev[current];
 26c:	                   0b068693          	addi	x13,x13,176
 270:	/----------------> 0ff77613          	andi	x12,x14,255
     ###     while (current != UINT8_MAX && temp_idx < 32) {
 274:	|              /-- 00a78663          	beq	x15,x10,280 <path_planner.c.d0a2e670+0xbd>
 278:	|           /--|-- 04b71663          	bne	x14,x11,2c4 <path_planner.c.d0a2e670+0x101>
 27c:	|           |  |   02000613          	addi	x12,x0,32
     ###     }
     ### 
     ###     // Reverse path into final array
     ###     idx = 0;
     ###     for (int i = temp_idx - 1; i >= 0; i--) {
 280:	|           |  \-> 02010713          	addi	x14,x2,32
 284:	|           |      00060793          	addi	x15,x12,0
 288:	|           |      00070693          	addi	x13,x14,0
 28c:	|           |      fff00593          	addi	x11,x0,-1
 290:	|     /-----|----> fff78793          	addi	x15,x15,-1
 294:	|     |     |  /-- 04b79463          	bne	x15,x11,2dc <path_planner.c.d0a2e670+0x119>
     ###         path_planned[idx++] = temp_path[i];
     ###     }
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 298:	|     |     |  |   00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 29c:	|     |     |  |   02000737          	lui	x14,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 2a0:	|  /--|--/--|--|-X 04c7c863          	blt	x15,x12,2f0 <path_planner.c.d0a2e670+0x12d>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 2a4:	|  |  |  |  |  |   020007b7          	lui	x15,0x2000
 2a8:	|  |  |  |  |  |   00100713          	addi	x14,x0,1
 2ac:	|  |  |  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 2b0:	|  |  |  |  |  |   04c12083          	lw	x1,76(x2)
 2b4:	|  |  |  |  |  |   04812403          	lw	x8,72(x2)
 2b8:	|  |  |  |  |  |   00000513          	addi	x10,x0,0
 2bc:	|  |  |  |  |  |   05010113          	addi	x2,x2,80
 2c0:	|  |  |  |  |  |   00008067          	jalr	x0,0(x1)
     ###         temp_path[temp_idx++] = current;
 2c4:	|  |  |  |  \--|-> 00e10633          	add	x12,x2,x14
 2c8:	|  |  |  |     |   00f60023          	sb	x15,0(x12)
     ###         current = prev[current];
 2cc:	|  |  |  |     |   00d787b3          	add	x15,x15,x13
 2d0:	|  |  |  |     |   0007c783          	lbu	x15,0(x15)
 2d4:	|  |  |  |     |   00170713          	addi	x14,x14,1 # 2000001 <__bss_end+0x1>
 2d8:	\--|--|--|-----|-- f99ff06f          	jal	x0,270 <path_planner.c.d0a2e670+0xad>
     ###         path_planned[idx++] = temp_path[i];
 2dc:	   |  |  |     \-> 00f10533          	add	x10,x2,x15
 2e0:	   |  |  |         00054503          	lbu	x10,0(x10)
 2e4:	   |  |  |         00170713          	addi	x14,x14,1
 2e8:	   |  |  |         fea70fa3          	sb	x10,-1(x14)
     ###     for (int i = temp_idx - 1; i >= 0; i--) {
 2ec:	   |  \--|-------- fa5ff06f          	jal	x0,290 <path_planner.c.d0a2e670+0xcd>
     ###         NODE_POINT = path_planned[i];
 2f0:	   |     \-------> 00f685b3          	add	x11,x13,x15
 2f4:	   |               0005c583          	lbu	x11,0(x11)
     ###     for (int i = 0; i < idx; ++i) {
 2f8:	   |               00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 2fc:	   |               00b70423          	sb	x11,8(x14)
     ###     for (int i = 0; i < idx; ++i) {
 300:	   \-------------- fa1ff06f          	jal	x0,2a0 <path_planner.c.d0a2e670+0xdd>

00000304 <_set_tls>:
 304:	00050213          	addi	x4,x10,0
 308:	00008067          	jalr	x0,0(x1)

0000030c <memcpy>:
 30c:	       00050313          	addi	x6,x10,0
 310:	/----- 00060e63          	beq	x12,x0,32c <memcpy+0x20>
 314:	|  /-> 00058383          	lb	x7,0(x11)
 318:	|  |   00730023          	sb	x7,0(x6)
 31c:	|  |   fff60613          	addi	x12,x12,-1
 320:	|  |   00130313          	addi	x6,x6,1
 324:	|  |   00158593          	addi	x11,x11,1
 328:	|  \-- fe0616e3          	bne	x12,x0,314 <memcpy+0x8>
 32c:	\----> 00008067          	jalr	x0,0(x1)

00000330 <memset>:
 330:	       00050313          	addi	x6,x10,0
 334:	/----- 00060a63          	beq	x12,x0,348 <memset+0x18>
 338:	|  /-> 00b30023          	sb	x11,0(x6)
 33c:	|  |   fff60613          	addi	x12,x12,-1
 340:	|  |   00130313          	addi	x6,x6,1
 344:	|  \-- fe061ae3          	bne	x12,x0,338 <memset+0x8>
 348:	\----> 00008067          	jalr	x0,0(x1)

0000034c <__text_end>:
 34c:	0000                	c.unimp
	...
